{"version":3,"sources":["components/item/item.js","helpers/drag-and-drop.js","components/item/index.js","components/list-items/list-items.js","components/list-items/index.js","components/input-value/index.js","components/input-value/input-value.js","components/user-panel/index.js","components/user-panel/user-panel.js","components/map/index.js","components/map/map.js","components/app/app.js","index.js"],"names":["dragID","dropID","drag","dragAndDrop","Object","classCallCheck","this","target","next","nextPosition","getBoundingClientRect","top","insertAdjacentElement","style","opacity","nextEl","nextTargetSibling","dragStart","evt","id","classList","add","dataTransfer","effectAllowed","dragEnter","stopPropagation","dragLeave","remove","Mark","_ref","data","deleteMark","swapMarks","name","isActive","classItem","react_default","a","createElement","className","draggable","onDragStart","onDragEnter","onDragLeave","onDragEnd","insertTarget","parseInt","type","onClick","class","createMarks","props","marks","methods","objectWithoutProperties","map","mark","components_item","key","createMark","ListItems","marksList","InputValue","_this","possibleConstructorReturn","getPrototypeOf","call","submitName","keyCode","value","addNewMark","setState","labelChanges","state","labelClass","onKeyDown","onChange","htmlFor","Component","UserPanel","components_input_value","components_list_items","YandexMap","connectPlacemarks","coords","el","react_yandex_maps_umd_production_min","geometry","createPlacemark","properties","hintContent","concat","balloonContent","options","onDrag","e","changePosition","get","getCoordinates","modules","onBalloonOpen","changeMarkStatus","onBalloonClose","createPlacemarks","center","zoom","_this$props","setCenterMap","placemarks","polylines","onBoundsChange","getCenter","App","createNewMark","mapCenter","addMarkToState","_id","toConsumableArray","first","second","firstIdx","getIndex","secondIdx","array","splice","apply","searchID","findIndex","insertModifiedMark","indexMark","slice","idx","_ref2","newCoords","newMark","objectSpread","components_map","components_user_panel","onEditItem","editItem","ReactDOM","render","app_App","document","getElementById"],"mappings":"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","file":"static/js/main.33fcee25.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./item.scss\";\r\nimport dragAndDrop from \"../../helpers/drag-and-drop\";\r\n\r\nconst drag = new dragAndDrop();\r\nlet dragID, dropID;\r\n\r\nconst dragStart = (evt) => {\r\n\r\n  drag.target = evt.target;\r\n  dragID = evt.target.id;\r\n  drag.target.classList.add('item--dragging');\r\n  evt.dataTransfer.effectAllowed = 'move';\r\n\r\n};\r\n\r\nconst dragEnter = (evt) => {\r\n\r\n  evt.stopPropagation();\r\n  if(evt.target === drag.target) return;\r\n\r\n  drag.next = evt.target;\r\n  dropID = evt.target.id;\r\n  drag.next.classList.add('item--drag-enter');\r\n};\r\n\r\nconst dragLeave = (evt) => {\r\n  if(evt.target === drag.target) return;\r\n  drag.next.classList.remove('item--drag-enter');\r\n};\r\n\r\n\r\nconst Mark = ( {data, deleteMark, swapMarks}) => {\r\n  const { name, isActive, id } = data;\r\n  let classItem = \"item\";\r\n\r\n  const dragEnd = () => {\r\n    drag.insertTarget();\r\n    swapMarks(parseInt(dragID), parseInt(dropID));\r\n  };\r\n\r\n  if (isActive) {\r\n    classItem += \" item--active\";\r\n  }\r\n  return (\r\n    <li \r\n      className = {classItem} \r\n      id = {id} \r\n      draggable = \"true\" \r\n      onDragStart = {dragStart}\r\n      onDragEnter = {dragEnter}\r\n      onDragLeave = {dragLeave}\r\n      onDragEnd = {dragEnd}\r\n      >\r\n\r\n      <p className = \"item__name\">{ name }</p>\r\n      <button className =\"item__button\" type=\"button\" onClick = { deleteMark }>\r\n        <i class=\"fas fa-trash item__icon\"></i>  \r\n      </button>\r\n\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Mark;","// вспомогательный класс для drag&drop\r\nexport default class dragAndDrop {\r\n  constructor() {\r\n    this.target = null;\r\n    this.next = null;\r\n  }\r\n\r\n  insertTarget () {\r\n    const nextPosition = this.next.getBoundingClientRect().top;\r\n    const targetPosition = this.target.getBoundingClientRect().top;\r\n\r\n    if (targetPosition > nextPosition) {\r\n      this.next.insertAdjacentElement('beforebegin', this.target);\r\n      this.target.style.opacity = '1';\r\n      return;\r\n    }\r\n    const nextEl = this.next.nextTargetSibling;\r\n\r\n    if (nextEl) {\r\n      this.target.style.opacity = '1';\r\n      nextEl.insertAdjacentElement('beforebegin', this.target);\r\n      return;\r\n    }\r\n    this.target.style.opacity = '1';\r\n    this.next.insertAdjacentElement('afterend', this.target);\r\n\r\n  };\r\n}","import Mark from \"./item\";\r\n\r\nexport default Mark;","// Загрузка основных модулей\r\nimport React from \"react\";\r\n\r\n// Загрузка scss\r\nimport \"./list-items.scss\";\r\n\r\n//Загрузка компонентов\r\nimport Mark from \"../item\";\r\n\r\n// создание li элемента\r\nconst createMark = (mark, methods) => {\r\n  return <Mark \r\n      key = { mark.id } \r\n      data = { mark } \r\n      deleteMark = { () => methods.deleteMark(mark.id)}\r\n      swapMarks = { methods.swapMarks }>\r\n    </Mark>\r\n};\r\n\r\n// массив li элементов\r\nconst createMarks = (props) => {\r\n  // получаем массив точек из props\r\n  const {data: { marks }, ...methods} = props;\r\n\r\n\r\n  return marks.map( (mark) => {\r\n    return createMark(mark, methods);\r\n  });\r\n}\r\n\r\nconst ListItems = (props) => {\r\n  const marksList = createMarks(props);\r\n\r\n  return (\r\n    <ul className =\"list-items\">\r\n      { marksList }\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default ListItems;","import ListItems from \"./list-items\";\r\n\r\nexport default ListItems;","import InputValue from \"./input-value\";\r\n\r\nexport default InputValue;","// Загрузка основных модулей\r\nimport React, { Component } from \"react\";\r\n\r\n// Загрузка scss\r\nimport \"./input-value.scss\";\r\n\r\nexport default class InputValue extends Component  {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      value: ''\r\n    }\r\n  }\r\n\r\n  // отправить название точки\r\n  submitName = (evt) => {\r\n    if (evt.keyCode === 13 && evt.target.value !== '') {\r\n      this.props.addNewMark(evt.target.value);\r\n\r\n      this.setState( {\r\n        value: ''\r\n      })\r\n    }\r\n  };\r\n\r\n  // изменить состояние state, при изменении поля в input'e\r\n  labelChanges = (evt) => {\r\n    this.setState( {\r\n        value: evt.target.value\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { value } = this.state;\r\n\r\n    // класс для label\r\n    let labelClass = 'input-point__text';\r\n\r\n    // Если state не пустой(в input'e есть значение), добавляем класс для label'a\r\n    if (value) {\r\n      labelClass += ' input-point__text--focus'\r\n    };\r\n\r\n    return (\r\n      <div className='input-point'>\r\n        <div className='input-point__wrapper'>\r\n          <input \r\n            className ='input' id='point' value = { value }\r\n            onKeyDown = { this.submitName }\r\n            onChange = { this.labelChanges }>\r\n          </input>\r\n          <label className={ labelClass } htmlFor='point'>Введите название точки</label>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n}","import UserPanel from \"./user-panel\";\r\n\r\nexport default UserPanel;","// Загрузка основных модулей\r\nimport React from \"react\";\r\n\r\n// Загрузка scss\r\nimport \"./user-panel.scss\";\r\n\r\n//Загрузка компонентов\r\nimport ListItems from \"../list-items\";\r\nimport InputValue from \"../input-value\";\r\n\r\nconst UserPanel = (props) => {\r\n\r\n  return (\r\n    <div className = \"user-panel\">\r\n      <InputValue \r\n        addNewMark = { props.addNewMark }>\r\n      </InputValue>\r\n\r\n      <ListItems \r\n        data = { props.data } \r\n        deleteMark = { props.deleteMark } \r\n        swapMarks = { props.swapMarks }>\r\n      </ListItems>\r\n    </div>   \r\n  )\r\n};\r\n\r\nexport default UserPanel;","import YandexMap from \"./map\";\r\n\r\nexport default YandexMap;","// Загрузка основных модулей\r\nimport React, { Component } from \"react\";\r\nimport { YMaps, Map, Placemark, Polyline } from \"react-yandex-maps\";\r\n\r\n// Загрузка scss\r\nimport \"./map.scss\";\r\n\r\n\r\nexport default class YandexMap extends Component  {\r\n    constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n        center: [55.76, 37.34],\r\n        zoom: 10 \r\n      }\r\n    }\r\n\r\n    // соединить плейсмаркеры линией на карте\r\n    connectPlacemarks = (data) => {\r\n      const coords = data.map( el => el.coords);\r\n      return <Polyline geometry = { coords }></Polyline>\r\n    };\r\n\r\n    /**\r\n     * создать Placemark\r\n     * @param {Object} mark - объект данных для создания placemark'a на карте\r\n     * @param {Object} methods - включает себя функции для событий при работе с placemark'ом\r\n     * @return {Function} возвращает функцию, которая создает placemark на карте\r\n     */\r\n    createPlacemark = (mark, methods) => {\r\n      const {id, name, coords} = mark;\r\n\r\n      return <Placemark \r\n          key ={id} \r\n          geometry = {coords}\r\n\r\n          properties = {\r\n            {\r\n              hintContent: `Указатель на точку с именем ${name}`,\r\n              balloonContent: `${name}`\r\n            }\r\n          }\r\n    \r\n          options = {{\r\n            draggable:true\r\n          }}\r\n          onDrag = { (e) => methods.changePosition(id, e.get(\"target\").geometry.getCoordinates())}\r\n          // модули необходимо для подключения балуна и хинта\r\n          modules = {['geoObject.addon.balloon', 'geoObject.addon.hint']}\r\n          onBalloonOpen = {() => methods.changeMarkStatus(id)}\r\n          onBalloonClose = {() => methods.changeMarkStatus(id)}>\r\n\r\n        </Placemark>\r\n    };\r\n\r\n    // создать массив Placemark'ов\r\n    createPlacemarks = (marks) => {\r\n      const {data, ...methods} = marks;\r\n      return data.map( (mark) => {\r\n        return this.createPlacemark(mark, methods)\r\n      });\r\n    };\r\n\r\n\r\n  render() {\r\n    const { setCenterMap, ...data } = this.props;\r\n\r\n    const placemarks = this.createPlacemarks(data);\r\n    const polylines = this.connectPlacemarks(this.props.data);\r\n    return (\r\n      <div className =\"map\">\r\n        <YMaps>\r\n          <Map className = \"map__container\" \r\n            state = {this.state} \r\n            onBoundsChange = { (evt) => { setCenterMap (evt.get(\"target\").getCenter())} }>\r\n              { placemarks }\r\n              { polylines }\r\n          </Map>\r\n        </YMaps>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","// Загрузка основных модулей\r\nimport React, { Component } from \"react\";\r\n\r\n// Загрузка scss\r\nimport \"./app.scss\";\r\n\r\n//Загрузка компонентов\r\nimport UserPanel from \"../user-panel\";\r\nimport YandexMap from \"../map\";\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // поле для формирование уникальных ключей для точек на карте\r\n    this._id = 0;\r\n\r\n    this.state = {\r\n      marks: [],\r\n      mapCenter :[55.76, 37.64],\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Создать новую точку\r\n   * @param {Number}  id - уникальный ID для точки\r\n   * @param {String} name - имя точки\r\n   * \r\n   * @returns {Object} Метод возвращает объект со свойствами точки\r\n   */\r\n  createNewMark = (id, name) => {\r\n      return {\r\n        id,\r\n        name,\r\n        coords: this.state.mapCenter,\r\n        isActive: false\r\n    };\r\n  };\r\n\r\n  /**\r\n   * @param {String} name -имя новой точки\r\n   */\r\n  addMarkToState = (name) => {\r\n        const id = this._id++;\r\n        const mark = this.createNewMark(id, name);\r\n\r\n        // изменяем state(массив точек)\r\n        // создаём новый массив из старого массива + новый элемент\r\n        this.setState ( ({ marks }) => {\r\n\r\n          return {\r\n            marks: [...marks, mark]\r\n          }\r\n        });\r\n  };\r\n\r\n  // Изменить центр карты\r\n  setCenterMap = (mapCenter) => {\r\n    this.setState( {\r\n      mapCenter\r\n    })\r\n  };\r\n\r\n  /**\r\n   * Поменять точки местами\r\n   * \r\n   */\r\n  swapMarks = (first, second) => {\r\n    const firstIdx = this.getIndex(this.state.marks, first);\r\n    const secondIdx = this.getIndex(this.state.marks, second);\r\n    const array = [...this.state.marks];\r\n\r\n    firstIdx >= 0 ? array.splice(secondIdx, 0, ...array.splice(firstIdx, 1)) : array.splice(secondIdx + 1, 0, ...array.splice(firstIdx, 1));\r\n\r\n    this.setState( () => {\r\n      return {\r\n        marks: array\r\n      }\r\n    });\r\n  };\r\n\r\n  // найти индекс в state массиве точек\r\n  getIndex = (searchID) => this.state.marks.findIndex( (el) => el.id === searchID);\r\n\r\n  // вставить изменённый элемент обратно в state\r\n  insertModifiedMark = (indexMark,mark) => [\r\n    ...this.state.marks.slice(0, indexMark), \r\n    mark,\r\n     ...this.state.marks.slice(indexMark + 1)\r\n    ];\r\n\r\n  // Удалить точку\r\n  deleteMark = (id) => {\r\n    const idx = this.getIndex(id);\r\n\r\n    this.setState( ({marks}) => {\r\n      return {\r\n        marks: [...marks.slice(0, idx), ...marks.slice(idx + 1)]\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Изменить координаты точки, после перетаскивания на карте\r\n   * @param {Number} id - уникальный идентификатор точки\r\n   * @param {Object} newCoords - новые координаты. Объект содержит координаты по X и Y\r\n   */\r\n  changePosition = (id, newCoords) => {\r\n    const idx = this.getIndex(id);\r\n\r\n    // создаём новую точку точку на основании предыдущих значений, но меняем координаты на текущие.\r\n    const newMark = {...this.state.marks[idx], coords: newCoords};\r\n\r\n    this.setState( () => {\r\n      return {\r\n        marks: this.insertModifiedMark(idx, newMark)\r\n      }\r\n    });\r\n  };\r\n\r\n  // изменять статус точки(активная || неактивная)\r\n  changeMarkStatus = (id) => {\r\n    const idx = this.getIndex(id);\r\n\r\n    // создаём новую точку точку на основании предыдущих значений, но меняем статус активности точки(меняем на противоположный от текущего)\r\n    const newMark = {...this.state.marks[idx], isActive: !this.state.marks[idx].isActive};\r\n\r\n    this.setState(() => {\r\n      return {\r\n        marks: this.insertModifiedMark(idx, newMark)\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className =\"app\">\r\n        <YandexMap \r\n          data = { this.state.marks } \r\n          changePosition = { this.changePosition } \r\n          setCenterMap = { this.setCenterMap }\r\n          changeMarkStatus = { this.changeMarkStatus }>\r\n        </YandexMap>\r\n        \r\n        <UserPanel \r\n          data = { this.state } \r\n          addNewMark = { this.addMarkToState } \r\n          deleteMark = {this.deleteMark}\r\n          swapMarks = {this.swapMarks}\r\n          onEditItem = {this.editItem}>\r\n        </UserPanel>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Загрузка scss\nimport \"./index.scss\";\n\nimport App from \"./components/app/app\";\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}